<atrun>
	<head>
		<name>Sample</name>
		<description>Short sample script</description>
		<author>TS</author>
		<date>201807-15 20:49:00</date>
		<version>0.1</version>
	</head>

	<client>
		<maxlog>200</maxlog>
		<indicator>
			<table>
				<tr>
					<td name="att1">ATT 1</td>
					<td name="creg">CREG</td>
					<td name="cgreg">CGREG</td>
				</tr>
			</table>
		</indicator>
		<graphs>
			<graph type="line" name="Attenuator" refresh="2000">
				<title>Attenuation</title>
				<data displayLegend="true">
					<set name="attenuation" borderColor="rgba(255, 0, 0, 1)" backgroundColor="rgba(180, 0, 180, 0.2)" lineTension="0.1" backgroundColorFill="true" pointRadius="0" pointHoverRadius="4">
						<label>attenuation (-dB)</label>
					</set>
				</data>
				<scales>
					<xaxes tooltipFormat="ll HH:mm:ss.SSS" display="true">
						<label display="false">Date</label>
					</xaxes>
					<yaxes suggestedMin="0" suggestedMax="90" display="true">
						<label display="true">-dB</label>
					</yaxes>
				</scales>
			</graph>
	<!-- 		<graph type="line" name="test-graph2" delay="2000" duration="600000" refresh="2000">
				<title>Test graph 2</title>
				<data>
					<set name="test-a" borderColor="rgba(255, 0, 0, 1)" backgroundColor="rgba(180, 0, 180, 0)" lineTension="0">
						<label>Test a Data</label>
					</set>
					<set name="test-b" borderColor="rgba(0,255, 0, 1)" backgroundColor="rgba( 180, 180, 0)" lineTension="0">
						<label>Test a Data</label>
					</set>
					
				</data>
				<scales>
					<xaxes timeunit="second" unitStepsize="10" />
					<yaxes beginAtZero="true" min="0" />
				</scales>
			</graph>
			<graph type="line" name="test-graph3" delay="2000" duration="600000" refresh="2000">
				<title>Test graph 3</title>
				<data>
					<set name="test-a" borderColor="rgba(255, 0, 0, 1)" backgroundColor="rgba(180, 0, 180, 0)" lineTension="0">
						<label>Test a Data</label>
					</set>
				</data>
				<scales>
					<xaxes timeunit="second" unitStepsize="10" />
					<yaxes beginAtZero="true" min="0" />
				</scales>
			</graph>
			<graph type="line" name="test-graph4" delay="2000" duration="600000" refresh="2000">
				<title>Test graph 4</title>
				<data>
					<set name="test-a" borderColor="rgba(255, 0, 0, 1)" backgroundColor="rgba(180, 0, 180, 0)" lineTension="0">
						<label>Test a Data</label>
					</set>
				</data>
				<scales>
					<xaxes timeunit="second" unitStepsize="10" />
					<yaxes beginAtZero="true" min="0" />
				</scales>
			</graph> -->

		</graphs>
	</client>
	<server>

		<script>	<![CDATA[  


		var serialCallbackProxyForwarder = null;
		var attSerial = getNewSerial({port: "/dev/tty.usbserial", baud: 115200, delimiter: "\n" });
		
		
		
		function pad(num, size) {
		    var s = "000000000" + num;
		    return s.substr(s.length-size);
		}


		function wait(delay) {
		    return new Promise(function(resolve, reject) {
		        setTimeout(resolve, delay);
		    });
		}
		
		function serialCallbackProxy(data) {		
 			if(proxyForwarder !== null) { proxyForwarder(data) ; }
		}




		function expectResult(cmd,expect,timeout) {
			
			attSerial.writeln(cmd);
		
			return new Promise(function(resolve, reject) {
			
				if(timeout !== undefined) { 
				console.log("set timeout :" + timeout);
					setTimeout(function() { resolve({data: "timeout", result: false}); }, timeout); 
						
				}
				proxyForwarder = function (data) { 
					var re = new RegExp(expect);
					if (re.test(data)) {
						resolve({data: data, result: true});  
					} else {
						resolve({data: data, result: false});   // we don't reject
					}
				}
			});	
		}

		attSerial.open(serialCallbackProxy);


		async function f1() {
			var result = {data: '', result: false};
			var retry = 0;
			updateIndicator("att1", Indicator.INDICATOR_UNKNOWN);
			while(!result.result) {
				
				result = await expectResult('rid','.*ATT-90.*',1000).catch((err) => { console.log(err);	});
				++retry;
				if(retry >= 3) {
					updateIndicator("att1", Indicator.INDICATOR_FAILED);
					attSerial.close();
					logger.warn("couldn't open Attenuator even after retries - exiting");
					exit(1);
				}
			}
			
			updateIndicator("att1", Indicator.INDICATOR_OK);

attSerial.writeln("wv00000");
exit(0);
			for(var db = 0; db <= 900; ++db) {
				var padString = pad(db,4);
//				await expectResult('wv' + padString+ '0','.*')
				attSerial.writeln("wv" + padString+ "0");
				Graph.update("Attenuator","attenuation",db / 10);	
				await wait(100);
			}
			
			
			
			
			attSerial.close();
			logger.norm("finishing test script");
			exit(0);
			
		}	
		f1();
		
	
		]]></script>


	</server>



	<!-- /* function pad(num, size) { var s = "000000000" + num; return s.substr(s.length-size); } */ // var db = 0; /* function testEvent() { setTimeout(function () { padString 
		= "5"; // var padString = pad(db, 5); logger.norm("Set DB to:" + padString); // attSerial.writeln("wv" + padString); // ++db; // if(db < 90) testEvent(); }, 500); } testEvent(); 
		*/ -->
</atrun>
